// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
package org.opentripplanner.ext.transmodelapi.generated;

import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

public class TransmodelGraphQLTypes {

  public enum AbsoluteDirection {
    east,
    north,
    northeast,
    northwest,
    south,
    southeast,
    southwest,
    west,
  }

  public enum AlternativeLegsFilter {
    noFilter,
    sameAuthority,
    sameLine,
    sameMode,
  }

  public enum ArrivalDeparture {
    arrivals,
    both,
    departures,
  }

  public enum BicycleOptimisationMethod {
    flat,
    greenways,
    quick,
    safe,
    triangle,
  }

  public enum BikesAllowed {
    allowed,
    noInformation,
    notAllowed,
  }

  public enum BookingMethod {
    callDriver,
    callOffice,
    online,
    phoneAtStop,
    text,
  }

  public static class DatedServiceJourneyQuaysArgs {

    private Integer first;
    private Integer last;

    public DatedServiceJourneyQuaysArgs(Map<String, Object> args) {
      if (args != null) {
        this.first = (Integer) args.get("first");
        this.last = (Integer) args.get("last");
      }
    }

    public Integer getFirst() {
      return this.first;
    }

    public Integer getLast() {
      return this.last;
    }

    public void setFirst(Integer first) {
      this.first = first;
    }

    public void setLast(Integer last) {
      this.last = last;
    }
  }

  public enum DirectionType {
    anticlockwise,
    clockwise,
    inbound,
    outbound,
    unknown,
  }

  public enum FilterPlaceType {
    bicycleRent,
    bikePark,
    carPark,
    quay,
    stopPlace,
  }

  public static class InputBannedInput {

    private java.util.List<String> authorities;
    private java.util.List<String> lines;
    private java.util.List<String> quays;
    private java.util.List<String> quaysHard;
    private java.util.List<String> rentalNetworks;
    private java.util.List<String> serviceJourneys;

    public InputBannedInput(Map<String, Object> args) {
      if (args != null) {
        this.authorities = (java.util.List<String>) args.get("authorities");
        this.lines = (java.util.List<String>) args.get("lines");
        this.quays = (java.util.List<String>) args.get("quays");
        this.quaysHard = (java.util.List<String>) args.get("quaysHard");
        this.rentalNetworks = (java.util.List<String>) args.get("rentalNetworks");
        this.serviceJourneys = (java.util.List<String>) args.get("serviceJourneys");
      }
    }

    public java.util.List<String> getAuthorities() {
      return this.authorities;
    }

    public java.util.List<String> getLines() {
      return this.lines;
    }

    public java.util.List<String> getQuays() {
      return this.quays;
    }

    public java.util.List<String> getQuaysHard() {
      return this.quaysHard;
    }

    public java.util.List<String> getRentalNetworks() {
      return this.rentalNetworks;
    }

    public java.util.List<String> getServiceJourneys() {
      return this.serviceJourneys;
    }

    public void setAuthorities(java.util.List<String> authorities) {
      this.authorities = authorities;
    }

    public void setLines(java.util.List<String> lines) {
      this.lines = lines;
    }

    public void setQuays(java.util.List<String> quays) {
      this.quays = quays;
    }

    public void setQuaysHard(java.util.List<String> quaysHard) {
      this.quaysHard = quaysHard;
    }

    public void setRentalNetworks(java.util.List<String> rentalNetworks) {
      this.rentalNetworks = rentalNetworks;
    }

    public void setServiceJourneys(java.util.List<String> serviceJourneys) {
      this.serviceJourneys = serviceJourneys;
    }
  }

  public static class InputCoordinatesInput {

    private Double latitude;
    private Double longitude;

    public InputCoordinatesInput(Map<String, Object> args) {
      if (args != null) {
        this.latitude = (Double) args.get("latitude");
        this.longitude = (Double) args.get("longitude");
      }
    }

    public Double getLatitude() {
      return this.latitude;
    }

    public Double getLongitude() {
      return this.longitude;
    }

    public void setLatitude(Double latitude) {
      this.latitude = latitude;
    }

    public void setLongitude(Double longitude) {
      this.longitude = longitude;
    }
  }

  public enum InputField {
    dateTime,
    from,
    to,
  }

  public static class InputPlaceIdsInput {

    private java.util.List<String> bikeParks;
    private java.util.List<String> bikeRentalStations;
    private java.util.List<String> carParks;
    private java.util.List<String> lines;
    private java.util.List<String> quays;

    public InputPlaceIdsInput(Map<String, Object> args) {
      if (args != null) {
        this.bikeParks = (java.util.List<String>) args.get("bikeParks");
        this.bikeRentalStations = (java.util.List<String>) args.get("bikeRentalStations");
        this.carParks = (java.util.List<String>) args.get("carParks");
        this.lines = (java.util.List<String>) args.get("lines");
        this.quays = (java.util.List<String>) args.get("quays");
      }
    }

    public java.util.List<String> getBikeParks() {
      return this.bikeParks;
    }

    public java.util.List<String> getBikeRentalStations() {
      return this.bikeRentalStations;
    }

    public java.util.List<String> getCarParks() {
      return this.carParks;
    }

    public java.util.List<String> getLines() {
      return this.lines;
    }

    public java.util.List<String> getQuays() {
      return this.quays;
    }

    public void setBikeParks(java.util.List<String> bikeParks) {
      this.bikeParks = bikeParks;
    }

    public void setBikeRentalStations(java.util.List<String> bikeRentalStations) {
      this.bikeRentalStations = bikeRentalStations;
    }

    public void setCarParks(java.util.List<String> carParks) {
      this.carParks = carParks;
    }

    public void setLines(java.util.List<String> lines) {
      this.lines = lines;
    }

    public void setQuays(java.util.List<String> quays) {
      this.quays = quays;
    }
  }

  public static class InputWhiteListedInput {

    private java.util.List<String> authorities;
    private java.util.List<String> lines;
    private java.util.List<String> rentalNetworks;

    public InputWhiteListedInput(Map<String, Object> args) {
      if (args != null) {
        this.authorities = (java.util.List<String>) args.get("authorities");
        this.lines = (java.util.List<String>) args.get("lines");
        this.rentalNetworks = (java.util.List<String>) args.get("rentalNetworks");
      }
    }

    public java.util.List<String> getAuthorities() {
      return this.authorities;
    }

    public java.util.List<String> getLines() {
      return this.lines;
    }

    public java.util.List<String> getRentalNetworks() {
      return this.rentalNetworks;
    }

    public void setAuthorities(java.util.List<String> authorities) {
      this.authorities = authorities;
    }

    public void setLines(java.util.List<String> lines) {
      this.lines = lines;
    }

    public void setRentalNetworks(java.util.List<String> rentalNetworks) {
      this.rentalNetworks = rentalNetworks;
    }
  }

  public enum InterchangePriority {
    allowed,
    notAllowed,
    preferred,
    recommended,
  }

  public enum InterchangeWeighting {
    interchangeAllowed,
    noInterchange,
    preferredInterchange,
    recommendedInterchange,
  }

  public static class ItineraryFiltersInput {

    private Double groupSimilarityKeepNumOfItineraries;
    private Double groupSimilarityKeepOne;
    private Double groupSimilarityKeepThree;
    private Double groupedOtherThanSameLegsMaxCostMultiplier;
    private Double minSafeTransferTimeFactor;
    private TransitGeneralizedCostFilterParamsInput transitGeneralizedCostLimit;

    public ItineraryFiltersInput(Map<String, Object> args) {
      if (args != null) {
        this.groupSimilarityKeepNumOfItineraries =
          (Double) args.get("groupSimilarityKeepNumOfItineraries");
        this.groupSimilarityKeepOne = (Double) args.get("groupSimilarityKeepOne");
        this.groupSimilarityKeepThree = (Double) args.get("groupSimilarityKeepThree");
        this.groupedOtherThanSameLegsMaxCostMultiplier =
          (Double) args.get("groupedOtherThanSameLegsMaxCostMultiplier");
        this.minSafeTransferTimeFactor = (Double) args.get("minSafeTransferTimeFactor");
        this.transitGeneralizedCostLimit =
          new TransitGeneralizedCostFilterParamsInput(
            (Map<String, Object>) args.get("transitGeneralizedCostLimit")
          );
      }
    }

    public Double getGroupSimilarityKeepNumOfItineraries() {
      return this.groupSimilarityKeepNumOfItineraries;
    }

    public Double getGroupSimilarityKeepOne() {
      return this.groupSimilarityKeepOne;
    }

    public Double getGroupSimilarityKeepThree() {
      return this.groupSimilarityKeepThree;
    }

    public Double getGroupedOtherThanSameLegsMaxCostMultiplier() {
      return this.groupedOtherThanSameLegsMaxCostMultiplier;
    }

    public Double getMinSafeTransferTimeFactor() {
      return this.minSafeTransferTimeFactor;
    }

    public TransitGeneralizedCostFilterParamsInput getTransitGeneralizedCostLimit() {
      return this.transitGeneralizedCostLimit;
    }

    public void setGroupSimilarityKeepNumOfItineraries(Double groupSimilarityKeepNumOfItineraries) {
      this.groupSimilarityKeepNumOfItineraries = groupSimilarityKeepNumOfItineraries;
    }

    public void setGroupSimilarityKeepOne(Double groupSimilarityKeepOne) {
      this.groupSimilarityKeepOne = groupSimilarityKeepOne;
    }

    public void setGroupSimilarityKeepThree(Double groupSimilarityKeepThree) {
      this.groupSimilarityKeepThree = groupSimilarityKeepThree;
    }

    public void setGroupedOtherThanSameLegsMaxCostMultiplier(
      Double groupedOtherThanSameLegsMaxCostMultiplier
    ) {
      this.groupedOtherThanSameLegsMaxCostMultiplier = groupedOtherThanSameLegsMaxCostMultiplier;
    }

    public void setMinSafeTransferTimeFactor(Double minSafeTransferTimeFactor) {
      this.minSafeTransferTimeFactor = minSafeTransferTimeFactor;
    }

    public void setTransitGeneralizedCostLimit(
      TransitGeneralizedCostFilterParamsInput transitGeneralizedCostLimit
    ) {
      this.transitGeneralizedCostLimit = transitGeneralizedCostLimit;
    }
  }

  public static class JourneyPatternServiceJourneysForDateArgs {

    private java.time.LocalDate date;

    public JourneyPatternServiceJourneysForDateArgs(Map<String, Object> args) {
      if (args != null) {
        this.date = (java.time.LocalDate) args.get("date");
      }
    }

    public java.time.LocalDate getDate() {
      return this.date;
    }

    public void setDate(java.time.LocalDate date) {
      this.date = date;
    }
  }

  public static class LegNextLegsArgs {

    private AlternativeLegsFilter filter;
    private Integer next;

    public LegNextLegsArgs(Map<String, Object> args) {
      if (args != null) {
        if (args.get("filter") instanceof AlternativeLegsFilter) {
          this.filter = (AlternativeLegsFilter) args.get("filter");
        } else {
          this.filter = AlternativeLegsFilter.valueOf((String) args.get("filter"));
        }
        this.next = (Integer) args.get("next");
      }
    }

    public AlternativeLegsFilter getFilter() {
      return this.filter;
    }

    public Integer getNext() {
      return this.next;
    }

    public void setFilter(AlternativeLegsFilter filter) {
      this.filter = filter;
    }

    public void setNext(Integer next) {
      this.next = next;
    }
  }

  public static class LegPreviousLegsArgs {

    private AlternativeLegsFilter filter;
    private Integer previous;

    public LegPreviousLegsArgs(Map<String, Object> args) {
      if (args != null) {
        if (args.get("filter") instanceof AlternativeLegsFilter) {
          this.filter = (AlternativeLegsFilter) args.get("filter");
        } else {
          this.filter = AlternativeLegsFilter.valueOf((String) args.get("filter"));
        }
        this.previous = (Integer) args.get("previous");
      }
    }

    public AlternativeLegsFilter getFilter() {
      return this.filter;
    }

    public Integer getPrevious() {
      return this.previous;
    }

    public void setFilter(AlternativeLegsFilter filter) {
      this.filter = filter;
    }

    public void setPrevious(Integer previous) {
      this.previous = previous;
    }
  }

  public enum Locale {
    no,
    us,
  }

  public static class LocationInput {

    private InputCoordinatesInput coordinates;
    private String name;
    private String place;

    public LocationInput(Map<String, Object> args) {
      if (args != null) {
        this.coordinates = new InputCoordinatesInput((Map<String, Object>) args.get("coordinates"));
        this.name = (String) args.get("name");
        this.place = (String) args.get("place");
      }
    }

    public InputCoordinatesInput getCoordinates() {
      return this.coordinates;
    }

    public String getName() {
      return this.name;
    }

    public String getPlace() {
      return this.place;
    }

    public void setCoordinates(InputCoordinatesInput coordinates) {
      this.coordinates = coordinates;
    }

    public void setName(String name) {
      this.name = name;
    }

    public void setPlace(String place) {
      this.place = place;
    }
  }

  public enum Mode {
    air,
    bicycle,
    bus,
    cableway,
    car,
    coach,
    foot,
    funicular,
    lift,
    metro,
    monorail,
    rail,
    scooter,
    tram,
    trolleybus,
    water,
  }

  public static class ModesInput {

    private StreetMode accessMode;
    private StreetMode directMode;
    private StreetMode egressMode;
    private java.util.List<TransportModesInput> transportModes;

    public ModesInput(Map<String, Object> args) {
      if (args != null) {
        if (args.get("accessMode") instanceof StreetMode) {
          this.accessMode = (StreetMode) args.get("accessMode");
        } else {
          this.accessMode = StreetMode.valueOf((String) args.get("accessMode"));
        }
        if (args.get("directMode") instanceof StreetMode) {
          this.directMode = (StreetMode) args.get("directMode");
        } else {
          this.directMode = StreetMode.valueOf((String) args.get("directMode"));
        }
        if (args.get("egressMode") instanceof StreetMode) {
          this.egressMode = (StreetMode) args.get("egressMode");
        } else {
          this.egressMode = StreetMode.valueOf((String) args.get("egressMode"));
        }
        if (args.get("transportModes") != null) {
          this.transportModes = (java.util.List<TransportModesInput>) args.get("transportModes");
        }
      }
    }

    public StreetMode getAccessMode() {
      return this.accessMode;
    }

    public StreetMode getDirectMode() {
      return this.directMode;
    }

    public StreetMode getEgressMode() {
      return this.egressMode;
    }

    public java.util.List<TransportModesInput> getTransportModes() {
      return this.transportModes;
    }

    public void setAccessMode(StreetMode accessMode) {
      this.accessMode = accessMode;
    }

    public void setDirectMode(StreetMode directMode) {
      this.directMode = directMode;
    }

    public void setEgressMode(StreetMode egressMode) {
      this.egressMode = egressMode;
    }

    public void setTransportModes(java.util.List<TransportModesInput> transportModes) {
      this.transportModes = transportModes;
    }
  }

  public enum MultiModalMode {
    all,
    child,
    parent,
  }

  public enum OccupancyStatus {
    fewSeatsAvailable,
    full,
    manySeatsAvailable,
    noData,
    notAcceptingPassengers,
    standingRoomOnly,
  }

  public enum PurchaseWhen {
    advanceAndDayOfTravel,
    dayOfTravelOnly,
    other,
    timeOfTravelOnly,
    untilPreviousDay,
  }

  public static class QuayEstimatedCallsArgs {

    private ArrivalDeparture arrivalDeparture;
    private Boolean includeCancelledTrips;
    private Integer numberOfDepartures;
    private Integer numberOfDeparturesPerLineAndDestinationDisplay;
    private Boolean omitNonBoarding;
    private Long startTime;
    private Integer timeRange;
    private InputWhiteListedInput whiteListed;
    private java.util.List<TransportMode> whiteListedModes;

    public QuayEstimatedCallsArgs(Map<String, Object> args) {
      if (args != null) {
        if (args.get("arrivalDeparture") instanceof ArrivalDeparture) {
          this.arrivalDeparture = (ArrivalDeparture) args.get("arrivalDeparture");
        } else {
          this.arrivalDeparture = ArrivalDeparture.valueOf((String) args.get("arrivalDeparture"));
        }
        this.includeCancelledTrips = (Boolean) args.get("includeCancelledTrips");
        this.numberOfDepartures = (Integer) args.get("numberOfDepartures");
        this.numberOfDeparturesPerLineAndDestinationDisplay =
          (Integer) args.get("numberOfDeparturesPerLineAndDestinationDisplay");
        this.omitNonBoarding = (Boolean) args.get("omitNonBoarding");
        this.startTime = (Long) args.get("startTime");
        this.timeRange = (Integer) args.get("timeRange");
        this.whiteListed = new InputWhiteListedInput((Map<String, Object>) args.get("whiteListed"));
        if (args.get("whiteListedModes") != null) {
          this.whiteListedModes =
            ((List<Object>) args.get("whiteListedModes")).stream()
              .map(item ->
                item instanceof TransportMode ? item : TransportMode.valueOf((String) item)
              )
              .map(TransportMode.class::cast)
              .collect(Collectors.toList());
        }
      }
    }

    public ArrivalDeparture getArrivalDeparture() {
      return this.arrivalDeparture;
    }

    public Boolean getIncludeCancelledTrips() {
      return this.includeCancelledTrips;
    }

    public Integer getNumberOfDepartures() {
      return this.numberOfDepartures;
    }

    public Integer getNumberOfDeparturesPerLineAndDestinationDisplay() {
      return this.numberOfDeparturesPerLineAndDestinationDisplay;
    }

    public Boolean getOmitNonBoarding() {
      return this.omitNonBoarding;
    }

    public Long getStartTime() {
      return this.startTime;
    }

    public Integer getTimeRange() {
      return this.timeRange;
    }

    public InputWhiteListedInput getWhiteListed() {
      return this.whiteListed;
    }

    public java.util.List<TransportMode> getWhiteListedModes() {
      return this.whiteListedModes;
    }

    public void setArrivalDeparture(ArrivalDeparture arrivalDeparture) {
      this.arrivalDeparture = arrivalDeparture;
    }

    public void setIncludeCancelledTrips(Boolean includeCancelledTrips) {
      this.includeCancelledTrips = includeCancelledTrips;
    }

    public void setNumberOfDepartures(Integer numberOfDepartures) {
      this.numberOfDepartures = numberOfDepartures;
    }

    public void setNumberOfDeparturesPerLineAndDestinationDisplay(
      Integer numberOfDeparturesPerLineAndDestinationDisplay
    ) {
      this.numberOfDeparturesPerLineAndDestinationDisplay =
        numberOfDeparturesPerLineAndDestinationDisplay;
    }

    public void setOmitNonBoarding(Boolean omitNonBoarding) {
      this.omitNonBoarding = omitNonBoarding;
    }

    public void setStartTime(Long startTime) {
      this.startTime = startTime;
    }

    public void setTimeRange(Integer timeRange) {
      this.timeRange = timeRange;
    }

    public void setWhiteListed(InputWhiteListedInput whiteListed) {
      this.whiteListed = whiteListed;
    }

    public void setWhiteListedModes(java.util.List<TransportMode> whiteListedModes) {
      this.whiteListedModes = whiteListedModes;
    }
  }

  public static class QuayNameArgs {

    private String lang;

    public QuayNameArgs(Map<String, Object> args) {
      if (args != null) {
        this.lang = (String) args.get("lang");
      }
    }

    public String getLang() {
      return this.lang;
    }

    public void setLang(String lang) {
      this.lang = lang;
    }
  }

  public static class QueryTypeAuthorityArgs {

    private String id;

    public QueryTypeAuthorityArgs(Map<String, Object> args) {
      if (args != null) {
        this.id = (String) args.get("id");
      }
    }

    public String getId() {
      return this.id;
    }

    public void setId(String id) {
      this.id = id;
    }
  }

  public static class QueryTypeBikeParkArgs {

    private String id;

    public QueryTypeBikeParkArgs(Map<String, Object> args) {
      if (args != null) {
        this.id = (String) args.get("id");
      }
    }

    public String getId() {
      return this.id;
    }

    public void setId(String id) {
      this.id = id;
    }
  }

  public static class QueryTypeBikeRentalStationArgs {

    private String id;

    public QueryTypeBikeRentalStationArgs(Map<String, Object> args) {
      if (args != null) {
        this.id = (String) args.get("id");
      }
    }

    public String getId() {
      return this.id;
    }

    public void setId(String id) {
      this.id = id;
    }
  }

  public static class QueryTypeBikeRentalStationsArgs {

    private java.util.List<String> ids;

    public QueryTypeBikeRentalStationsArgs(Map<String, Object> args) {
      if (args != null) {
        this.ids = (java.util.List<String>) args.get("ids");
      }
    }

    public java.util.List<String> getIds() {
      return this.ids;
    }

    public void setIds(java.util.List<String> ids) {
      this.ids = ids;
    }
  }

  public static class QueryTypeBikeRentalStationsByBboxArgs {

    private Double maximumLatitude;
    private Double maximumLongitude;
    private Double minimumLatitude;
    private Double minimumLongitude;

    public QueryTypeBikeRentalStationsByBboxArgs(Map<String, Object> args) {
      if (args != null) {
        this.maximumLatitude = (Double) args.get("maximumLatitude");
        this.maximumLongitude = (Double) args.get("maximumLongitude");
        this.minimumLatitude = (Double) args.get("minimumLatitude");
        this.minimumLongitude = (Double) args.get("minimumLongitude");
      }
    }

    public Double getMaximumLatitude() {
      return this.maximumLatitude;
    }

    public Double getMaximumLongitude() {
      return this.maximumLongitude;
    }

    public Double getMinimumLatitude() {
      return this.minimumLatitude;
    }

    public Double getMinimumLongitude() {
      return this.minimumLongitude;
    }

    public void setMaximumLatitude(Double maximumLatitude) {
      this.maximumLatitude = maximumLatitude;
    }

    public void setMaximumLongitude(Double maximumLongitude) {
      this.maximumLongitude = maximumLongitude;
    }

    public void setMinimumLatitude(Double minimumLatitude) {
      this.minimumLatitude = minimumLatitude;
    }

    public void setMinimumLongitude(Double minimumLongitude) {
      this.minimumLongitude = minimumLongitude;
    }
  }

  public static class QueryTypeDatedServiceJourneyArgs {

    private String id;

    public QueryTypeDatedServiceJourneyArgs(Map<String, Object> args) {
      if (args != null) {
        this.id = (String) args.get("id");
      }
    }

    public String getId() {
      return this.id;
    }

    public void setId(String id) {
      this.id = id;
    }
  }

  public static class QueryTypeDatedServiceJourneysArgs {

    private java.util.List<ServiceAlteration> alterations;
    private java.util.List<String> authorities;
    private java.util.List<String> lines;
    private java.util.List<java.time.LocalDate> operatingDays;
    private java.util.List<String> privateCodes;
    private java.util.List<String> replacementFor;
    private java.util.List<String> serviceJourneys;

    public QueryTypeDatedServiceJourneysArgs(Map<String, Object> args) {
      if (args != null) {
        if (args.get("alterations") != null) {
          this.alterations =
            ((List<Object>) args.get("alterations")).stream()
              .map(item ->
                item instanceof ServiceAlteration ? item : ServiceAlteration.valueOf((String) item)
              )
              .map(ServiceAlteration.class::cast)
              .collect(Collectors.toList());
        }
        this.authorities = (java.util.List<String>) args.get("authorities");
        this.lines = (java.util.List<String>) args.get("lines");
        this.operatingDays = (java.util.List<java.time.LocalDate>) args.get("operatingDays");
        this.privateCodes = (java.util.List<String>) args.get("privateCodes");
        this.replacementFor = (java.util.List<String>) args.get("replacementFor");
        this.serviceJourneys = (java.util.List<String>) args.get("serviceJourneys");
      }
    }

    public java.util.List<ServiceAlteration> getAlterations() {
      return this.alterations;
    }

    public java.util.List<String> getAuthorities() {
      return this.authorities;
    }

    public java.util.List<String> getLines() {
      return this.lines;
    }

    public java.util.List<java.time.LocalDate> getOperatingDays() {
      return this.operatingDays;
    }

    public java.util.List<String> getPrivateCodes() {
      return this.privateCodes;
    }

    public java.util.List<String> getReplacementFor() {
      return this.replacementFor;
    }

    public java.util.List<String> getServiceJourneys() {
      return this.serviceJourneys;
    }

    public void setAlterations(java.util.List<ServiceAlteration> alterations) {
      this.alterations = alterations;
    }

    public void setAuthorities(java.util.List<String> authorities) {
      this.authorities = authorities;
    }

    public void setLines(java.util.List<String> lines) {
      this.lines = lines;
    }

    public void setOperatingDays(java.util.List<java.time.LocalDate> operatingDays) {
      this.operatingDays = operatingDays;
    }

    public void setPrivateCodes(java.util.List<String> privateCodes) {
      this.privateCodes = privateCodes;
    }

    public void setReplacementFor(java.util.List<String> replacementFor) {
      this.replacementFor = replacementFor;
    }

    public void setServiceJourneys(java.util.List<String> serviceJourneys) {
      this.serviceJourneys = serviceJourneys;
    }
  }

  public static class QueryTypeGroupOfLinesArgs {

    private String id;

    public QueryTypeGroupOfLinesArgs(Map<String, Object> args) {
      if (args != null) {
        this.id = (String) args.get("id");
      }
    }

    public String getId() {
      return this.id;
    }

    public void setId(String id) {
      this.id = id;
    }
  }

  public static class QueryTypeLegArgs {

    private String id;

    public QueryTypeLegArgs(Map<String, Object> args) {
      if (args != null) {
        this.id = (String) args.get("id");
      }
    }

    public String getId() {
      return this.id;
    }

    public void setId(String id) {
      this.id = id;
    }
  }

  public static class QueryTypeLineArgs {

    private String id;

    public QueryTypeLineArgs(Map<String, Object> args) {
      if (args != null) {
        this.id = (String) args.get("id");
      }
    }

    public String getId() {
      return this.id;
    }

    public void setId(String id) {
      this.id = id;
    }
  }

  public static class QueryTypeLinesArgs {

    private java.util.List<String> authorities;
    private Boolean flexibleOnly;
    private java.util.List<String> ids;
    private String name;
    private String publicCode;
    private java.util.List<String> publicCodes;
    private java.util.List<TransportMode> transportModes;

    public QueryTypeLinesArgs(Map<String, Object> args) {
      if (args != null) {
        this.authorities = (java.util.List<String>) args.get("authorities");
        this.flexibleOnly = (Boolean) args.get("flexibleOnly");
        this.ids = (java.util.List<String>) args.get("ids");
        this.name = (String) args.get("name");
        this.publicCode = (String) args.get("publicCode");
        this.publicCodes = (java.util.List<String>) args.get("publicCodes");
        if (args.get("transportModes") != null) {
          this.transportModes =
            ((List<Object>) args.get("transportModes")).stream()
              .map(item ->
                item instanceof TransportMode ? item : TransportMode.valueOf((String) item)
              )
              .map(TransportMode.class::cast)
              .collect(Collectors.toList());
        }
      }
    }

    public java.util.List<String> getAuthorities() {
      return this.authorities;
    }

    public Boolean getFlexibleOnly() {
      return this.flexibleOnly;
    }

    public java.util.List<String> getIds() {
      return this.ids;
    }

    public String getName() {
      return this.name;
    }

    public String getPublicCode() {
      return this.publicCode;
    }

    public java.util.List<String> getPublicCodes() {
      return this.publicCodes;
    }

    public java.util.List<TransportMode> getTransportModes() {
      return this.transportModes;
    }

    public void setAuthorities(java.util.List<String> authorities) {
      this.authorities = authorities;
    }

    public void setFlexibleOnly(Boolean flexibleOnly) {
      this.flexibleOnly = flexibleOnly;
    }

    public void setIds(java.util.List<String> ids) {
      this.ids = ids;
    }

    public void setName(String name) {
      this.name = name;
    }

    public void setPublicCode(String publicCode) {
      this.publicCode = publicCode;
    }

    public void setPublicCodes(java.util.List<String> publicCodes) {
      this.publicCodes = publicCodes;
    }

    public void setTransportModes(java.util.List<TransportMode> transportModes) {
      this.transportModes = transportModes;
    }
  }

  public static class QueryTypeNearestArgs {

    private String after;
    private String before;
    private InputPlaceIdsInput filterByIds;
    private Boolean filterByInUse;
    private java.util.List<TransportMode> filterByModes;
    private java.util.List<FilterPlaceType> filterByPlaceTypes;
    private Integer first;
    private Integer last;
    private Double latitude;
    private Double longitude;
    private Double maximumDistance;
    private Integer maximumResults;
    private MultiModalMode multiModalMode;

    public QueryTypeNearestArgs(Map<String, Object> args) {
      if (args != null) {
        this.after = (String) args.get("after");
        this.before = (String) args.get("before");
        this.filterByIds = new InputPlaceIdsInput((Map<String, Object>) args.get("filterByIds"));
        this.filterByInUse = (Boolean) args.get("filterByInUse");
        if (args.get("filterByModes") != null) {
          this.filterByModes =
            ((List<Object>) args.get("filterByModes")).stream()
              .map(item ->
                item instanceof TransportMode ? item : TransportMode.valueOf((String) item)
              )
              .map(TransportMode.class::cast)
              .collect(Collectors.toList());
        }
        if (args.get("filterByPlaceTypes") != null) {
          this.filterByPlaceTypes =
            ((List<Object>) args.get("filterByPlaceTypes")).stream()
              .map(item ->
                item instanceof FilterPlaceType ? item : FilterPlaceType.valueOf((String) item)
              )
              .map(FilterPlaceType.class::cast)
              .collect(Collectors.toList());
        }
        this.first = (Integer) args.get("first");
        this.last = (Integer) args.get("last");
        this.latitude = (Double) args.get("latitude");
        this.longitude = (Double) args.get("longitude");
        this.maximumDistance = (Double) args.get("maximumDistance");
        this.maximumResults = (Integer) args.get("maximumResults");
        if (args.get("multiModalMode") instanceof MultiModalMode) {
          this.multiModalMode = (MultiModalMode) args.get("multiModalMode");
        } else {
          this.multiModalMode = MultiModalMode.valueOf((String) args.get("multiModalMode"));
        }
      }
    }

    public String getAfter() {
      return this.after;
    }

    public String getBefore() {
      return this.before;
    }

    public InputPlaceIdsInput getFilterByIds() {
      return this.filterByIds;
    }

    public Boolean getFilterByInUse() {
      return this.filterByInUse;
    }

    public java.util.List<TransportMode> getFilterByModes() {
      return this.filterByModes;
    }

    public java.util.List<FilterPlaceType> getFilterByPlaceTypes() {
      return this.filterByPlaceTypes;
    }

    public Integer getFirst() {
      return this.first;
    }

    public Integer getLast() {
      return this.last;
    }

    public Double getLatitude() {
      return this.latitude;
    }

    public Double getLongitude() {
      return this.longitude;
    }

    public Double getMaximumDistance() {
      return this.maximumDistance;
    }

    public Integer getMaximumResults() {
      return this.maximumResults;
    }

    public MultiModalMode getMultiModalMode() {
      return this.multiModalMode;
    }

    public void setAfter(String after) {
      this.after = after;
    }

    public void setBefore(String before) {
      this.before = before;
    }

    public void setFilterByIds(InputPlaceIdsInput filterByIds) {
      this.filterByIds = filterByIds;
    }

    public void setFilterByInUse(Boolean filterByInUse) {
      this.filterByInUse = filterByInUse;
    }

    public void setFilterByModes(java.util.List<TransportMode> filterByModes) {
      this.filterByModes = filterByModes;
    }

    public void setFilterByPlaceTypes(java.util.List<FilterPlaceType> filterByPlaceTypes) {
      this.filterByPlaceTypes = filterByPlaceTypes;
    }

    public void setFirst(Integer first) {
      this.first = first;
    }

    public void setLast(Integer last) {
      this.last = last;
    }

    public void setLatitude(Double latitude) {
      this.latitude = latitude;
    }

    public void setLongitude(Double longitude) {
      this.longitude = longitude;
    }

    public void setMaximumDistance(Double maximumDistance) {
      this.maximumDistance = maximumDistance;
    }

    public void setMaximumResults(Integer maximumResults) {
      this.maximumResults = maximumResults;
    }

    public void setMultiModalMode(MultiModalMode multiModalMode) {
      this.multiModalMode = multiModalMode;
    }
  }

  public static class QueryTypeOperatorArgs {

    private String id;

    public QueryTypeOperatorArgs(Map<String, Object> args) {
      if (args != null) {
        this.id = (String) args.get("id");
      }
    }

    public String getId() {
      return this.id;
    }

    public void setId(String id) {
      this.id = id;
    }
  }

  public static class QueryTypeQuayArgs {

    private String id;

    public QueryTypeQuayArgs(Map<String, Object> args) {
      if (args != null) {
        this.id = (String) args.get("id");
      }
    }

    public String getId() {
      return this.id;
    }

    public void setId(String id) {
      this.id = id;
    }
  }

  public static class QueryTypeQuaysArgs {

    private java.util.List<String> ids;
    private String name;

    public QueryTypeQuaysArgs(Map<String, Object> args) {
      if (args != null) {
        this.ids = (java.util.List<String>) args.get("ids");
        this.name = (String) args.get("name");
      }
    }

    public java.util.List<String> getIds() {
      return this.ids;
    }

    public String getName() {
      return this.name;
    }

    public void setIds(java.util.List<String> ids) {
      this.ids = ids;
    }

    public void setName(String name) {
      this.name = name;
    }
  }

  public static class QueryTypeQuaysByBboxArgs {

    private String authority;
    private Boolean filterByInUse;
    private Double maximumLatitude;
    private Double maximumLongitude;
    private Double minimumLatitude;
    private Double minimumLongitude;

    public QueryTypeQuaysByBboxArgs(Map<String, Object> args) {
      if (args != null) {
        this.authority = (String) args.get("authority");
        this.filterByInUse = (Boolean) args.get("filterByInUse");
        this.maximumLatitude = (Double) args.get("maximumLatitude");
        this.maximumLongitude = (Double) args.get("maximumLongitude");
        this.minimumLatitude = (Double) args.get("minimumLatitude");
        this.minimumLongitude = (Double) args.get("minimumLongitude");
      }
    }

    public String getAuthority() {
      return this.authority;
    }

    public Boolean getFilterByInUse() {
      return this.filterByInUse;
    }

    public Double getMaximumLatitude() {
      return this.maximumLatitude;
    }

    public Double getMaximumLongitude() {
      return this.maximumLongitude;
    }

    public Double getMinimumLatitude() {
      return this.minimumLatitude;
    }

    public Double getMinimumLongitude() {
      return this.minimumLongitude;
    }

    public void setAuthority(String authority) {
      this.authority = authority;
    }

    public void setFilterByInUse(Boolean filterByInUse) {
      this.filterByInUse = filterByInUse;
    }

    public void setMaximumLatitude(Double maximumLatitude) {
      this.maximumLatitude = maximumLatitude;
    }

    public void setMaximumLongitude(Double maximumLongitude) {
      this.maximumLongitude = maximumLongitude;
    }

    public void setMinimumLatitude(Double minimumLatitude) {
      this.minimumLatitude = minimumLatitude;
    }

    public void setMinimumLongitude(Double minimumLongitude) {
      this.minimumLongitude = minimumLongitude;
    }
  }

  public static class QueryTypeQuaysByRadiusArgs {

    private String after;
    private String authority;
    private String before;
    private Integer first;
    private Integer last;
    private Double latitude;
    private Double longitude;
    private Double radius;

    public QueryTypeQuaysByRadiusArgs(Map<String, Object> args) {
      if (args != null) {
        this.after = (String) args.get("after");
        this.authority = (String) args.get("authority");
        this.before = (String) args.get("before");
        this.first = (Integer) args.get("first");
        this.last = (Integer) args.get("last");
        this.latitude = (Double) args.get("latitude");
        this.longitude = (Double) args.get("longitude");
        this.radius = (Double) args.get("radius");
      }
    }

    public String getAfter() {
      return this.after;
    }

    public String getAuthority() {
      return this.authority;
    }

    public String getBefore() {
      return this.before;
    }

    public Integer getFirst() {
      return this.first;
    }

    public Integer getLast() {
      return this.last;
    }

    public Double getLatitude() {
      return this.latitude;
    }

    public Double getLongitude() {
      return this.longitude;
    }

    public Double getRadius() {
      return this.radius;
    }

    public void setAfter(String after) {
      this.after = after;
    }

    public void setAuthority(String authority) {
      this.authority = authority;
    }

    public void setBefore(String before) {
      this.before = before;
    }

    public void setFirst(Integer first) {
      this.first = first;
    }

    public void setLast(Integer last) {
      this.last = last;
    }

    public void setLatitude(Double latitude) {
      this.latitude = latitude;
    }

    public void setLongitude(Double longitude) {
      this.longitude = longitude;
    }

    public void setRadius(Double radius) {
      this.radius = radius;
    }
  }

  public static class QueryTypeServiceJourneyArgs {

    private String id;

    public QueryTypeServiceJourneyArgs(Map<String, Object> args) {
      if (args != null) {
        this.id = (String) args.get("id");
      }
    }

    public String getId() {
      return this.id;
    }

    public void setId(String id) {
      this.id = id;
    }
  }

  public static class QueryTypeServiceJourneysArgs {

    private java.util.List<java.time.LocalDate> activeDates;
    private java.util.List<String> authorities;
    private java.util.List<String> lines;
    private java.util.List<String> privateCodes;

    public QueryTypeServiceJourneysArgs(Map<String, Object> args) {
      if (args != null) {
        this.activeDates = (java.util.List<java.time.LocalDate>) args.get("activeDates");
        this.authorities = (java.util.List<String>) args.get("authorities");
        this.lines = (java.util.List<String>) args.get("lines");
        this.privateCodes = (java.util.List<String>) args.get("privateCodes");
      }
    }

    public java.util.List<java.time.LocalDate> getActiveDates() {
      return this.activeDates;
    }

    public java.util.List<String> getAuthorities() {
      return this.authorities;
    }

    public java.util.List<String> getLines() {
      return this.lines;
    }

    public java.util.List<String> getPrivateCodes() {
      return this.privateCodes;
    }

    public void setActiveDates(java.util.List<java.time.LocalDate> activeDates) {
      this.activeDates = activeDates;
    }

    public void setAuthorities(java.util.List<String> authorities) {
      this.authorities = authorities;
    }

    public void setLines(java.util.List<String> lines) {
      this.lines = lines;
    }

    public void setPrivateCodes(java.util.List<String> privateCodes) {
      this.privateCodes = privateCodes;
    }
  }

  public static class QueryTypeSituationArgs {

    private String situationNumber;

    public QueryTypeSituationArgs(Map<String, Object> args) {
      if (args != null) {
        this.situationNumber = (String) args.get("situationNumber");
      }
    }

    public String getSituationNumber() {
      return this.situationNumber;
    }

    public void setSituationNumber(String situationNumber) {
      this.situationNumber = situationNumber;
    }
  }

  public static class QueryTypeSituationsArgs {

    private java.util.List<String> authorities;
    private java.util.List<Severity> severities;

    public QueryTypeSituationsArgs(Map<String, Object> args) {
      if (args != null) {
        this.authorities = (java.util.List<String>) args.get("authorities");
        if (args.get("severities") != null) {
          this.severities =
            ((List<Object>) args.get("severities")).stream()
              .map(item -> item instanceof Severity ? item : Severity.valueOf((String) item))
              .map(Severity.class::cast)
              .collect(Collectors.toList());
        }
      }
    }

    public java.util.List<String> getAuthorities() {
      return this.authorities;
    }

    public java.util.List<Severity> getSeverities() {
      return this.severities;
    }

    public void setAuthorities(java.util.List<String> authorities) {
      this.authorities = authorities;
    }

    public void setSeverities(java.util.List<Severity> severities) {
      this.severities = severities;
    }
  }

  public static class QueryTypeStopPlaceArgs {

    private String id;

    public QueryTypeStopPlaceArgs(Map<String, Object> args) {
      if (args != null) {
        this.id = (String) args.get("id");
      }
    }

    public String getId() {
      return this.id;
    }

    public void setId(String id) {
      this.id = id;
    }
  }

  public static class QueryTypeStopPlacesArgs {

    private java.util.List<String> ids;

    public QueryTypeStopPlacesArgs(Map<String, Object> args) {
      if (args != null) {
        this.ids = (java.util.List<String>) args.get("ids");
      }
    }

    public java.util.List<String> getIds() {
      return this.ids;
    }

    public void setIds(java.util.List<String> ids) {
      this.ids = ids;
    }
  }

  public static class QueryTypeStopPlacesByBboxArgs {

    private String authority;
    private Boolean filterByInUse;
    private Double maximumLatitude;
    private Double maximumLongitude;
    private Double minimumLatitude;
    private Double minimumLongitude;
    private MultiModalMode multiModalMode;

    public QueryTypeStopPlacesByBboxArgs(Map<String, Object> args) {
      if (args != null) {
        this.authority = (String) args.get("authority");
        this.filterByInUse = (Boolean) args.get("filterByInUse");
        this.maximumLatitude = (Double) args.get("maximumLatitude");
        this.maximumLongitude = (Double) args.get("maximumLongitude");
        this.minimumLatitude = (Double) args.get("minimumLatitude");
        this.minimumLongitude = (Double) args.get("minimumLongitude");
        if (args.get("multiModalMode") instanceof MultiModalMode) {
          this.multiModalMode = (MultiModalMode) args.get("multiModalMode");
        } else {
          this.multiModalMode = MultiModalMode.valueOf((String) args.get("multiModalMode"));
        }
      }
    }

    public String getAuthority() {
      return this.authority;
    }

    public Boolean getFilterByInUse() {
      return this.filterByInUse;
    }

    public Double getMaximumLatitude() {
      return this.maximumLatitude;
    }

    public Double getMaximumLongitude() {
      return this.maximumLongitude;
    }

    public Double getMinimumLatitude() {
      return this.minimumLatitude;
    }

    public Double getMinimumLongitude() {
      return this.minimumLongitude;
    }

    public MultiModalMode getMultiModalMode() {
      return this.multiModalMode;
    }

    public void setAuthority(String authority) {
      this.authority = authority;
    }

    public void setFilterByInUse(Boolean filterByInUse) {
      this.filterByInUse = filterByInUse;
    }

    public void setMaximumLatitude(Double maximumLatitude) {
      this.maximumLatitude = maximumLatitude;
    }

    public void setMaximumLongitude(Double maximumLongitude) {
      this.maximumLongitude = maximumLongitude;
    }

    public void setMinimumLatitude(Double minimumLatitude) {
      this.minimumLatitude = minimumLatitude;
    }

    public void setMinimumLongitude(Double minimumLongitude) {
      this.minimumLongitude = minimumLongitude;
    }

    public void setMultiModalMode(MultiModalMode multiModalMode) {
      this.multiModalMode = multiModalMode;
    }
  }

  public static class QueryTypeTripArgs {

    private Integer alightSlackDefault;
    private java.util.List<TransportModeSlackInput> alightSlackList;
    private Boolean arriveBy;
    private InputBannedInput banned;
    private BicycleOptimisationMethod bicycleOptimisationMethod;
    private Double bikeSpeed;
    private Integer boardSlackDefault;
    private java.util.List<TransportModeSlackInput> boardSlackList;
    private Long dateTime;
    private Boolean debugItineraryFilter;
    private LocationInput from;
    private Boolean ignoreRealtimeUpdates;
    private Boolean includePlannedCancellations;
    private ItineraryFiltersInput itineraryFilters;
    private Locale locale;
    private Integer maximumAdditionalTransfers;
    private Integer maximumTransfers;
    private ModesInput modes;
    private Integer numTripPatterns;
    private String pageCursor;
    private Double relaxTransitSearchGeneralizedCostAtDestination;
    private Integer searchWindow;
    private Boolean timetableView;
    private LocationInput to;
    private Integer transferPenalty;
    private Integer transferSlack;
    private TriangleFactorsInput triangleFactors;
    private Boolean useBikeRentalAvailabilityInformation;
    private Double waitReluctance;
    private Double walkReluctance;
    private Double walkSpeed;
    private Boolean wheelchairAccessible;
    private InputWhiteListedInput whiteListed;

    public QueryTypeTripArgs(Map<String, Object> args) {
      if (args != null) {
        this.alightSlackDefault = (Integer) args.get("alightSlackDefault");
        if (args.get("alightSlackList") != null) {
          this.alightSlackList =
            (java.util.List<TransportModeSlackInput>) args.get("alightSlackList");
        }
        this.arriveBy = (Boolean) args.get("arriveBy");
        this.banned = new InputBannedInput((Map<String, Object>) args.get("banned"));
        if (args.get("bicycleOptimisationMethod") instanceof BicycleOptimisationMethod) {
          this.bicycleOptimisationMethod =
            (BicycleOptimisationMethod) args.get("bicycleOptimisationMethod");
        } else {
          this.bicycleOptimisationMethod =
            BicycleOptimisationMethod.valueOf((String) args.get("bicycleOptimisationMethod"));
        }
        this.bikeSpeed = (Double) args.get("bikeSpeed");
        this.boardSlackDefault = (Integer) args.get("boardSlackDefault");
        if (args.get("boardSlackList") != null) {
          this.boardSlackList =
            (java.util.List<TransportModeSlackInput>) args.get("boardSlackList");
        }
        this.dateTime = (Long) args.get("dateTime");
        this.debugItineraryFilter = (Boolean) args.get("debugItineraryFilter");
        this.from = new LocationInput((Map<String, Object>) args.get("from"));
        this.ignoreRealtimeUpdates = (Boolean) args.get("ignoreRealtimeUpdates");
        this.includePlannedCancellations = (Boolean) args.get("includePlannedCancellations");
        this.itineraryFilters =
          new ItineraryFiltersInput((Map<String, Object>) args.get("itineraryFilters"));
        if (args.get("locale") instanceof Locale) {
          this.locale = (Locale) args.get("locale");
        } else {
          this.locale = Locale.valueOf((String) args.get("locale"));
        }
        this.maximumAdditionalTransfers = (Integer) args.get("maximumAdditionalTransfers");
        this.maximumTransfers = (Integer) args.get("maximumTransfers");
        this.modes = new ModesInput((Map<String, Object>) args.get("modes"));
        this.numTripPatterns = (Integer) args.get("numTripPatterns");
        this.pageCursor = (String) args.get("pageCursor");
        this.relaxTransitSearchGeneralizedCostAtDestination =
          (Double) args.get("relaxTransitSearchGeneralizedCostAtDestination");
        this.searchWindow = (Integer) args.get("searchWindow");
        this.timetableView = (Boolean) args.get("timetableView");
        this.to = new LocationInput((Map<String, Object>) args.get("to"));
        this.transferPenalty = (Integer) args.get("transferPenalty");
        this.transferSlack = (Integer) args.get("transferSlack");
        this.triangleFactors =
          new TriangleFactorsInput((Map<String, Object>) args.get("triangleFactors"));
        this.useBikeRentalAvailabilityInformation =
          (Boolean) args.get("useBikeRentalAvailabilityInformation");
        this.waitReluctance = (Double) args.get("waitReluctance");
        this.walkReluctance = (Double) args.get("walkReluctance");
        this.walkSpeed = (Double) args.get("walkSpeed");
        this.wheelchairAccessible = (Boolean) args.get("wheelchairAccessible");
        this.whiteListed = new InputWhiteListedInput((Map<String, Object>) args.get("whiteListed"));
      }
    }

    public Integer getAlightSlackDefault() {
      return this.alightSlackDefault;
    }

    public java.util.List<TransportModeSlackInput> getAlightSlackList() {
      return this.alightSlackList;
    }

    public Boolean getArriveBy() {
      return this.arriveBy;
    }

    public InputBannedInput getBanned() {
      return this.banned;
    }

    public BicycleOptimisationMethod getBicycleOptimisationMethod() {
      return this.bicycleOptimisationMethod;
    }

    public Double getBikeSpeed() {
      return this.bikeSpeed;
    }

    public Integer getBoardSlackDefault() {
      return this.boardSlackDefault;
    }

    public java.util.List<TransportModeSlackInput> getBoardSlackList() {
      return this.boardSlackList;
    }

    public Long getDateTime() {
      return this.dateTime;
    }

    public Boolean getDebugItineraryFilter() {
      return this.debugItineraryFilter;
    }

    public LocationInput getFrom() {
      return this.from;
    }

    public Boolean getIgnoreRealtimeUpdates() {
      return this.ignoreRealtimeUpdates;
    }

    public Boolean getIncludePlannedCancellations() {
      return this.includePlannedCancellations;
    }

    public ItineraryFiltersInput getItineraryFilters() {
      return this.itineraryFilters;
    }

    public Locale getLocale() {
      return this.locale;
    }

    public Integer getMaximumAdditionalTransfers() {
      return this.maximumAdditionalTransfers;
    }

    public Integer getMaximumTransfers() {
      return this.maximumTransfers;
    }

    public ModesInput getModes() {
      return this.modes;
    }

    public Integer getNumTripPatterns() {
      return this.numTripPatterns;
    }

    public String getPageCursor() {
      return this.pageCursor;
    }

    public Double getRelaxTransitSearchGeneralizedCostAtDestination() {
      return this.relaxTransitSearchGeneralizedCostAtDestination;
    }

    public Integer getSearchWindow() {
      return this.searchWindow;
    }

    public Boolean getTimetableView() {
      return this.timetableView;
    }

    public LocationInput getTo() {
      return this.to;
    }

    public Integer getTransferPenalty() {
      return this.transferPenalty;
    }

    public Integer getTransferSlack() {
      return this.transferSlack;
    }

    public TriangleFactorsInput getTriangleFactors() {
      return this.triangleFactors;
    }

    public Boolean getUseBikeRentalAvailabilityInformation() {
      return this.useBikeRentalAvailabilityInformation;
    }

    public Double getWaitReluctance() {
      return this.waitReluctance;
    }

    public Double getWalkReluctance() {
      return this.walkReluctance;
    }

    public Double getWalkSpeed() {
      return this.walkSpeed;
    }

    public Boolean getWheelchairAccessible() {
      return this.wheelchairAccessible;
    }

    public InputWhiteListedInput getWhiteListed() {
      return this.whiteListed;
    }

    public void setAlightSlackDefault(Integer alightSlackDefault) {
      this.alightSlackDefault = alightSlackDefault;
    }

    public void setAlightSlackList(java.util.List<TransportModeSlackInput> alightSlackList) {
      this.alightSlackList = alightSlackList;
    }

    public void setArriveBy(Boolean arriveBy) {
      this.arriveBy = arriveBy;
    }

    public void setBanned(InputBannedInput banned) {
      this.banned = banned;
    }

    public void setBicycleOptimisationMethod(BicycleOptimisationMethod bicycleOptimisationMethod) {
      this.bicycleOptimisationMethod = bicycleOptimisationMethod;
    }

    public void setBikeSpeed(Double bikeSpeed) {
      this.bikeSpeed = bikeSpeed;
    }

    public void setBoardSlackDefault(Integer boardSlackDefault) {
      this.boardSlackDefault = boardSlackDefault;
    }

    public void setBoardSlackList(java.util.List<TransportModeSlackInput> boardSlackList) {
      this.boardSlackList = boardSlackList;
    }

    public void setDateTime(Long dateTime) {
      this.dateTime = dateTime;
    }

    public void setDebugItineraryFilter(Boolean debugItineraryFilter) {
      this.debugItineraryFilter = debugItineraryFilter;
    }

    public void setFrom(LocationInput from) {
      this.from = from;
    }

    public void setIgnoreRealtimeUpdates(Boolean ignoreRealtimeUpdates) {
      this.ignoreRealtimeUpdates = ignoreRealtimeUpdates;
    }

    public void setIncludePlannedCancellations(Boolean includePlannedCancellations) {
      this.includePlannedCancellations = includePlannedCancellations;
    }

    public void setItineraryFilters(ItineraryFiltersInput itineraryFilters) {
      this.itineraryFilters = itineraryFilters;
    }

    public void setLocale(Locale locale) {
      this.locale = locale;
    }

    public void setMaximumAdditionalTransfers(Integer maximumAdditionalTransfers) {
      this.maximumAdditionalTransfers = maximumAdditionalTransfers;
    }

    public void setMaximumTransfers(Integer maximumTransfers) {
      this.maximumTransfers = maximumTransfers;
    }

    public void setModes(ModesInput modes) {
      this.modes = modes;
    }

    public void setNumTripPatterns(Integer numTripPatterns) {
      this.numTripPatterns = numTripPatterns;
    }

    public void setPageCursor(String pageCursor) {
      this.pageCursor = pageCursor;
    }

    public void setRelaxTransitSearchGeneralizedCostAtDestination(
      Double relaxTransitSearchGeneralizedCostAtDestination
    ) {
      this.relaxTransitSearchGeneralizedCostAtDestination =
        relaxTransitSearchGeneralizedCostAtDestination;
    }

    public void setSearchWindow(Integer searchWindow) {
      this.searchWindow = searchWindow;
    }

    public void setTimetableView(Boolean timetableView) {
      this.timetableView = timetableView;
    }

    public void setTo(LocationInput to) {
      this.to = to;
    }

    public void setTransferPenalty(Integer transferPenalty) {
      this.transferPenalty = transferPenalty;
    }

    public void setTransferSlack(Integer transferSlack) {
      this.transferSlack = transferSlack;
    }

    public void setTriangleFactors(TriangleFactorsInput triangleFactors) {
      this.triangleFactors = triangleFactors;
    }

    public void setUseBikeRentalAvailabilityInformation(
      Boolean useBikeRentalAvailabilityInformation
    ) {
      this.useBikeRentalAvailabilityInformation = useBikeRentalAvailabilityInformation;
    }

    public void setWaitReluctance(Double waitReluctance) {
      this.waitReluctance = waitReluctance;
    }

    public void setWalkReluctance(Double walkReluctance) {
      this.walkReluctance = walkReluctance;
    }

    public void setWalkSpeed(Double walkSpeed) {
      this.walkSpeed = walkSpeed;
    }

    public void setWheelchairAccessible(Boolean wheelchairAccessible) {
      this.wheelchairAccessible = wheelchairAccessible;
    }

    public void setWhiteListed(InputWhiteListedInput whiteListed) {
      this.whiteListed = whiteListed;
    }
  }

  public enum RealtimeState {
    Added,
    canceled,
    modified,
    scheduled,
    updated,
  }

  public enum RelativeDirection {
    circleClockwise,
    circleCounterclockwise,
    continueOn,
    depart,
    elevator,
    hardLeft,
    hardRight,
    left,
    right,
    slightlyLeft,
    slightlyRight,
    uturnLeft,
    uturnRight,
  }

  public enum ReportType {
    general,
    incident,
  }

  public enum RoutingErrorCode {
    locationNotFound,
    noStopsInRange,
    noTransitConnection,
    noTransitConnectionInSearchWindow,
    outsideBounds,
    outsideServicePeriod,
    systemError,
    walkingBetterThanTransit,
  }

  public enum ServiceAlteration {
    cancellation,
    extraJourney,
    planned,
    replaced,
  }

  public static class ServiceJourneyEstimatedCallsArgs {

    private java.time.LocalDate date;

    public ServiceJourneyEstimatedCallsArgs(Map<String, Object> args) {
      if (args != null) {
        this.date = (java.time.LocalDate) args.get("date");
      }
    }

    public java.time.LocalDate getDate() {
      return this.date;
    }

    public void setDate(java.time.LocalDate date) {
      this.date = date;
    }
  }

  public static class ServiceJourneyQuaysArgs {

    private Integer first;
    private Integer last;

    public ServiceJourneyQuaysArgs(Map<String, Object> args) {
      if (args != null) {
        this.first = (Integer) args.get("first");
        this.last = (Integer) args.get("last");
      }
    }

    public Integer getFirst() {
      return this.first;
    }

    public Integer getLast() {
      return this.last;
    }

    public void setFirst(Integer first) {
      this.first = first;
    }

    public void setLast(Integer last) {
      this.last = last;
    }
  }

  public enum Severity {
    noImpact,
    normal,
    severe,
    slight,
    undefined,
    unknown,
    verySevere,
    verySlight,
  }

  public static class StopPlaceEstimatedCallsArgs {

    private ArrivalDeparture arrivalDeparture;
    private Boolean includeCancelledTrips;
    private Integer numberOfDepartures;
    private Integer numberOfDeparturesPerLineAndDestinationDisplay;
    private Long startTime;
    private Integer timeRange;
    private InputWhiteListedInput whiteListed;
    private java.util.List<TransportMode> whiteListedModes;

    public StopPlaceEstimatedCallsArgs(Map<String, Object> args) {
      if (args != null) {
        if (args.get("arrivalDeparture") instanceof ArrivalDeparture) {
          this.arrivalDeparture = (ArrivalDeparture) args.get("arrivalDeparture");
        } else {
          this.arrivalDeparture = ArrivalDeparture.valueOf((String) args.get("arrivalDeparture"));
        }
        this.includeCancelledTrips = (Boolean) args.get("includeCancelledTrips");
        this.numberOfDepartures = (Integer) args.get("numberOfDepartures");
        this.numberOfDeparturesPerLineAndDestinationDisplay =
          (Integer) args.get("numberOfDeparturesPerLineAndDestinationDisplay");
        this.startTime = (Long) args.get("startTime");
        this.timeRange = (Integer) args.get("timeRange");
        this.whiteListed = new InputWhiteListedInput((Map<String, Object>) args.get("whiteListed"));
        if (args.get("whiteListedModes") != null) {
          this.whiteListedModes =
            ((List<Object>) args.get("whiteListedModes")).stream()
              .map(item ->
                item instanceof TransportMode ? item : TransportMode.valueOf((String) item)
              )
              .map(TransportMode.class::cast)
              .collect(Collectors.toList());
        }
      }
    }

    public ArrivalDeparture getArrivalDeparture() {
      return this.arrivalDeparture;
    }

    public Boolean getIncludeCancelledTrips() {
      return this.includeCancelledTrips;
    }

    public Integer getNumberOfDepartures() {
      return this.numberOfDepartures;
    }

    public Integer getNumberOfDeparturesPerLineAndDestinationDisplay() {
      return this.numberOfDeparturesPerLineAndDestinationDisplay;
    }

    public Long getStartTime() {
      return this.startTime;
    }

    public Integer getTimeRange() {
      return this.timeRange;
    }

    public InputWhiteListedInput getWhiteListed() {
      return this.whiteListed;
    }

    public java.util.List<TransportMode> getWhiteListedModes() {
      return this.whiteListedModes;
    }

    public void setArrivalDeparture(ArrivalDeparture arrivalDeparture) {
      this.arrivalDeparture = arrivalDeparture;
    }

    public void setIncludeCancelledTrips(Boolean includeCancelledTrips) {
      this.includeCancelledTrips = includeCancelledTrips;
    }

    public void setNumberOfDepartures(Integer numberOfDepartures) {
      this.numberOfDepartures = numberOfDepartures;
    }

    public void setNumberOfDeparturesPerLineAndDestinationDisplay(
      Integer numberOfDeparturesPerLineAndDestinationDisplay
    ) {
      this.numberOfDeparturesPerLineAndDestinationDisplay =
        numberOfDeparturesPerLineAndDestinationDisplay;
    }

    public void setStartTime(Long startTime) {
      this.startTime = startTime;
    }

    public void setTimeRange(Integer timeRange) {
      this.timeRange = timeRange;
    }

    public void setWhiteListed(InputWhiteListedInput whiteListed) {
      this.whiteListed = whiteListed;
    }

    public void setWhiteListedModes(java.util.List<TransportMode> whiteListedModes) {
      this.whiteListedModes = whiteListedModes;
    }
  }

  public static class StopPlaceNameArgs {

    private String lang;

    public StopPlaceNameArgs(Map<String, Object> args) {
      if (args != null) {
        this.lang = (String) args.get("lang");
      }
    }

    public String getLang() {
      return this.lang;
    }

    public void setLang(String lang) {
      this.lang = lang;
    }
  }

  public static class StopPlaceQuaysArgs {

    private Boolean filterByInUse;

    public StopPlaceQuaysArgs(Map<String, Object> args) {
      if (args != null) {
        this.filterByInUse = (Boolean) args.get("filterByInUse");
      }
    }

    public Boolean getFilterByInUse() {
      return this.filterByInUse;
    }

    public void setFilterByInUse(Boolean filterByInUse) {
      this.filterByInUse = filterByInUse;
    }
  }

  public enum StreetMode {
    bicycle,
    bike_park,
    bike_rental,
    car,
    car_park,
    car_pickup,
    flexible,
    foot,
    scooter_rental,
  }

  public static class TransitGeneralizedCostFilterParamsInput {

    private org.opentripplanner.routing.api.request.framework.DoubleAlgorithmFunction costLimitFunction;
    private Double intervalRelaxFactor;

    public TransitGeneralizedCostFilterParamsInput(Map<String, Object> args) {
      if (args != null) {
        this.costLimitFunction =
          (org.opentripplanner.routing.api.request.framework.DoubleAlgorithmFunction) args.get(
            "costLimitFunction"
          );
        this.intervalRelaxFactor = (Double) args.get("intervalRelaxFactor");
      }
    }

    public org.opentripplanner.routing.api.request.framework.DoubleAlgorithmFunction getCostLimitFunction() {
      return this.costLimitFunction;
    }

    public Double getIntervalRelaxFactor() {
      return this.intervalRelaxFactor;
    }

    public void setCostLimitFunction(
      org.opentripplanner.routing.api.request.framework.DoubleAlgorithmFunction costLimitFunction
    ) {
      this.costLimitFunction = costLimitFunction;
    }

    public void setIntervalRelaxFactor(Double intervalRelaxFactor) {
      this.intervalRelaxFactor = intervalRelaxFactor;
    }
  }

  public enum TransportMode {
    air,
    bus,
    cableway,
    coach,
    funicular,
    lift,
    metro,
    monorail,
    rail,
    tram,
    trolleybus,
    unknown,
    water,
  }

  public static class TransportModeSlackInput {

    private java.util.List<TransportMode> modes;
    private Integer slack;

    public TransportModeSlackInput(Map<String, Object> args) {
      if (args != null) {
        if (args.get("modes") != null) {
          this.modes =
            ((List<Object>) args.get("modes")).stream()
              .map(item ->
                item instanceof TransportMode ? item : TransportMode.valueOf((String) item)
              )
              .map(TransportMode.class::cast)
              .collect(Collectors.toList());
        }
        this.slack = (Integer) args.get("slack");
      }
    }

    public java.util.List<TransportMode> getModes() {
      return this.modes;
    }

    public Integer getSlack() {
      return this.slack;
    }

    public void setModes(java.util.List<TransportMode> modes) {
      this.modes = modes;
    }

    public void setSlack(Integer slack) {
      this.slack = slack;
    }
  }

  public static class TransportModesInput {

    private TransportMode transportMode;
    private java.util.List<TransportSubmode> transportSubModes;

    public TransportModesInput(Map<String, Object> args) {
      if (args != null) {
        if (args.get("transportMode") instanceof TransportMode) {
          this.transportMode = (TransportMode) args.get("transportMode");
        } else {
          this.transportMode = TransportMode.valueOf((String) args.get("transportMode"));
        }
        if (args.get("transportSubModes") != null) {
          this.transportSubModes =
            ((List<Object>) args.get("transportSubModes")).stream()
              .map(item ->
                item instanceof TransportSubmode ? item : TransportSubmode.valueOf((String) item)
              )
              .map(TransportSubmode.class::cast)
              .collect(Collectors.toList());
        }
      }
    }

    public TransportMode getTransportMode() {
      return this.transportMode;
    }

    public java.util.List<TransportSubmode> getTransportSubModes() {
      return this.transportSubModes;
    }

    public void setTransportMode(TransportMode transportMode) {
      this.transportMode = transportMode;
    }

    public void setTransportSubModes(java.util.List<TransportSubmode> transportSubModes) {
      this.transportSubModes = transportSubModes;
    }
  }

  public enum TransportSubmode {
    SchengenAreaFlight,
    airportBoatLink,
    airportLinkBus,
    airportLinkRail,
    airshipService,
    allFunicularServices,
    allHireVehicles,
    allTaxiServices,
    bikeTaxi,
    blackCab,
    cableCar,
    cableFerry,
    canalBarge,
    carTransportRailService,
    chairLift,
    charterTaxi,
    cityTram,
    communalTaxi,
    commuterCoach,
    crossCountryRail,
    dedicatedLaneBus,
    demandAndResponseBus,
    domesticCharterFlight,
    domesticFlight,
    domesticScheduledFlight,
    dragLift,
    expressBus,
    funicular,
    helicopterService,
    highFrequencyBus,
    highSpeedPassengerService,
    highSpeedRail,
    highSpeedVehicleService,
    hireCar,
    hireCycle,
    hireMotorbike,
    hireVan,
    intercontinentalCharterFlight,
    intercontinentalFlight,
    international,
    internationalCarFerry,
    internationalCharterFlight,
    internationalCoach,
    internationalFlight,
    internationalPassengerFerry,
    interregionalRail,
    lift,
    local,
    localBus,
    localCarFerry,
    localPassengerFerry,
    localTram,
    longDistance,
    metro,
    miniCab,
    mobilityBus,
    mobilityBusForRegisteredDisabled,
    nationalCarFerry,
    nationalCoach,
    nationalPassengerFerry,
    nightBus,
    nightRail,
    postBoat,
    postBus,
    rackAndPinionRailway,
    railReplacementBus,
    railShuttle,
    railTaxi,
    regionalBus,
    regionalCarFerry,
    regionalCoach,
    regionalPassengerFerry,
    regionalRail,
    regionalTram,
    replacementRailService,
    riverBus,
    roadFerryLink,
    roundTripCharterFlight,
    scheduledFerry,
    schoolAndPublicServiceBus,
    schoolBoat,
    schoolBus,
    schoolCoach,
    shortHaulInternationalFlight,
    shuttleBus,
    shuttleCoach,
    shuttleFerryService,
    shuttleFlight,
    shuttleTram,
    sightseeingBus,
    sightseeingCoach,
    sightseeingFlight,
    sightseeingService,
    sightseeingTram,
    sleeperRailService,
    specialCoach,
    specialNeedsBus,
    specialTrain,
    streetCableCar,
    suburbanRailway,
    telecabin,
    telecabinLink,
    touristCoach,
    touristRailway,
    trainFerry,
    trainTram,
    tube,
    undefined,
    undefinedFunicular,
    unknown,
    urbanRailway,
    waterTaxi,
  }

  public static class TriangleFactorsInput {

    private Double safety;
    private Double slope;
    private Double time;

    public TriangleFactorsInput(Map<String, Object> args) {
      if (args != null) {
        this.safety = (Double) args.get("safety");
        this.slope = (Double) args.get("slope");
        this.time = (Double) args.get("time");
      }
    }

    public Double getSafety() {
      return this.safety;
    }

    public Double getSlope() {
      return this.slope;
    }

    public Double getTime() {
      return this.time;
    }

    public void setSafety(Double safety) {
      this.safety = safety;
    }

    public void setSlope(Double slope) {
      this.slope = slope;
    }

    public void setTime(Double time) {
      this.time = time;
    }
  }

  public static class TripMessageStringsArgs {

    private String language;

    public TripMessageStringsArgs(Map<String, Object> args) {
      if (args != null) {
        this.language = (String) args.get("language");
      }
    }

    public String getLanguage() {
      return this.language;
    }

    public void setLanguage(String language) {
      this.language = language;
    }
  }

  public enum VertexType {
    bikePark,
    bikeShare,
    normal,
    transit,
  }

  public enum WheelchairBoarding {
    noInformation,
    notPossible,
    possible,
  }
}
