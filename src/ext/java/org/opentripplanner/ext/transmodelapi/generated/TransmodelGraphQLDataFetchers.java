//THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
package org.opentripplanner.ext.transmodelapi.generated;

import graphql.relay.Connection;
import graphql.relay.Edge;
import graphql.relay.PageInfo;
import graphql.schema.DataFetcher;
import graphql.schema.TypeResolver;
import java.util.Map;
import org.apache.commons.lang3.tuple.Pair;
import org.opentripplanner.api.resource.DebugOutput;
import org.opentripplanner.ext.transmodelapi.model.PlanResponse;
import org.opentripplanner.ext.transmodelapi.model.TransmodelTransportSubmode;
import org.opentripplanner.ext.transmodelapi.model.TransportModeSlack;
import org.opentripplanner.ext.transmodelapi.model.stop.MonoOrMultiModalStation;
import org.opentripplanner.ext.transmodelapi.model.util.EncodedPolylineBeanWithStops;
import org.opentripplanner.framework.geometry.EncodedPolyline;
import org.opentripplanner.model.BookingInfo;
import org.opentripplanner.model.BookingMethod;
import org.opentripplanner.model.SystemNotice;
import org.opentripplanner.model.TripTimeOnDate;
import org.opentripplanner.model.plan.AbsoluteDirection;
import org.opentripplanner.model.plan.Itinerary;
import org.opentripplanner.model.plan.Leg;
import org.opentripplanner.model.plan.Place;
import org.opentripplanner.model.plan.RelativeDirection;
import org.opentripplanner.model.plan.VertexType;
import org.opentripplanner.model.plan.WalkStep;
import org.opentripplanner.model.projectinfo.OtpProjectInfo;
import org.opentripplanner.model.transfer.ConstrainedTransfer;
import org.opentripplanner.model.transfer.TransferPriority;
import org.opentripplanner.routing.alertpatch.AlertUrl;
import org.opentripplanner.routing.alertpatch.TransitAlert;
import org.opentripplanner.routing.api.request.preference.RoutingPreferences;
import org.opentripplanner.routing.api.response.InputField;
import org.opentripplanner.routing.api.response.RoutingError;
import org.opentripplanner.routing.api.response.RoutingErrorCode;
import org.opentripplanner.routing.api.response.TripSearchMetadata;
import org.opentripplanner.routing.graphfinder.NearbyStop;
import org.opentripplanner.routing.graphfinder.PlaceAtDistance;
import org.opentripplanner.routing.vehicle_parking.VehicleParking;
import org.opentripplanner.routing.vehicle_rental.RentalVehicleType;
import org.opentripplanner.routing.vehicle_rental.VehicleRentalStation;
import org.opentripplanner.routing.vehicle_rental.VehicleRentalVehicle;
import org.opentripplanner.transit.model.basic.Accessibility;
import org.opentripplanner.transit.model.basic.Notice;
import org.opentripplanner.transit.model.basic.TransitMode;
import org.opentripplanner.transit.model.network.BikeAccess;
import org.opentripplanner.transit.model.network.GroupOfRoutes;
import org.opentripplanner.transit.model.network.Route;
import org.opentripplanner.transit.model.network.TripPattern;
import org.opentripplanner.transit.model.organization.Agency;
import org.opentripplanner.transit.model.organization.Branding;
import org.opentripplanner.transit.model.organization.ContactInfo;
import org.opentripplanner.transit.model.organization.Operator;
import org.opentripplanner.transit.model.site.FareZone;
import org.opentripplanner.transit.model.site.StopLocation;
import org.opentripplanner.transit.model.timetable.Direction;
import org.opentripplanner.transit.model.timetable.OccupancyStatus;
import org.opentripplanner.transit.model.timetable.RealTimeState;
import org.opentripplanner.transit.model.timetable.Trip;
import org.opentripplanner.transit.model.timetable.TripAlteration;
import org.opentripplanner.transit.model.timetable.TripOnServiceDate;

public class TransmodelGraphQLDataFetchers {

  /** Authority involved in public transportation. An organisation under which the responsibility of organising the transport service in a certain area is placed. */
  public interface TransmodelGraphQLAuthority {
    public DataFetcher<String> fareUrl();

    public DataFetcher<String> id();

    public DataFetcher<String> lang();

    public DataFetcher<java.util.List<Route>> lines();

    public DataFetcher<String> name();

    public DataFetcher<String> phone();

    public DataFetcher<java.util.List<TransitAlert>> situations();

    public DataFetcher<String> timezone();

    public DataFetcher<String> url();
  }

  public interface TransmodelGraphQLBikePark {
    public DataFetcher<String> id();

    public DataFetcher<Double> latitude();

    public DataFetcher<Double> longitude();

    public DataFetcher<String> name();

    public DataFetcher<Boolean> realtime();

    public DataFetcher<Integer> spacesAvailable();
  }

  public interface TransmodelGraphQLBikeRentalStation {
    public DataFetcher<Boolean> allowDropoff();

    public DataFetcher<Integer> bikesAvailable();

    public DataFetcher<String> id();

    public DataFetcher<Double> latitude();

    public DataFetcher<Double> longitude();

    public DataFetcher<String> name();

    public DataFetcher<java.util.List<String>> networks();

    public DataFetcher<Boolean> realtimeOccupancyAvailable();

    public DataFetcher<Integer> spacesAvailable();
  }

  public interface TransmodelGraphQLBookingArrangement {
    public DataFetcher<String> bookWhen();

    public DataFetcher<ContactInfo> bookingContact();

    public DataFetcher<java.util.List<BookingMethod>> bookingMethods();

    public DataFetcher<String> bookingNote();

    public DataFetcher<Integer> latestBookingDay();

    public DataFetcher<java.time.LocalTime> latestBookingTime();

    public DataFetcher<String> minimumBookingPeriod();
  }

  public interface TransmodelGraphQLBranding {
    public DataFetcher<String> description();

    public DataFetcher<String> id();

    public DataFetcher<String> image();

    public DataFetcher<String> name();

    public DataFetcher<String> shortName();

    public DataFetcher<String> url();
  }

  public interface TransmodelGraphQLContact {
    public DataFetcher<String> contactPerson();

    public DataFetcher<String> email();

    public DataFetcher<String> furtherDetails();

    public DataFetcher<String> phone();

    public DataFetcher<String> url();
  }

  /** A planned journey on a specific day */
  public interface TransmodelGraphQLDatedServiceJourney {
    public DataFetcher<java.util.List<TripTimeOnDate>> estimatedCalls();

    public DataFetcher<String> id();

    public DataFetcher<TripPattern> journeyPattern();

    public DataFetcher<java.time.LocalDate> operatingDay();

    public DataFetcher<java.util.List<StopLocation>> quays();

    public DataFetcher<java.util.List<TripOnServiceDate>> replacementFor();

    public DataFetcher<Trip> serviceJourney();

    public DataFetcher<TripAlteration> tripAlteration();
  }

  /** An advertised destination of a specific journey pattern, usually displayed on a head sign or at other on-board locations. */
  public interface TransmodelGraphQLDestinationDisplay {
    public DataFetcher<String> frontText();

    public DataFetcher<java.util.List<String>> via();
  }

  /** List of visits to quays as part of vehicle journeys. Updated with real time information where available */
  public interface TransmodelGraphQLEstimatedCall {
    public DataFetcher<Long> actualArrivalTime();

    public DataFetcher<Long> actualDepartureTime();

    public DataFetcher<Long> aimedArrivalTime();

    public DataFetcher<Long> aimedDepartureTime();

    public DataFetcher<BookingInfo> bookingArrangements();

    public DataFetcher<Boolean> cancellation();

    public DataFetcher<java.time.LocalDate> date();

    public DataFetcher<TripOnServiceDate> datedServiceJourney();

    public DataFetcher<TripTimeOnDate> destinationDisplay();

    public DataFetcher<Long> expectedArrivalTime();

    public DataFetcher<Long> expectedDepartureTime();

    public DataFetcher<Boolean> forAlighting();

    public DataFetcher<Boolean> forBoarding();

    public DataFetcher<java.util.List<Notice>> notices();

    public DataFetcher<OccupancyStatus> occupancyStatus();

    public DataFetcher<Boolean> predictionInaccurate();

    public DataFetcher<StopLocation> quay();

    public DataFetcher<Boolean> realtime();

    public DataFetcher<RealTimeState> realtimeState();

    public DataFetcher<Boolean> requestStop();

    public DataFetcher<Trip> serviceJourney();

    public DataFetcher<java.util.List<TransitAlert>> situations();

    public DataFetcher<Integer> stopPositionInPattern();

    public DataFetcher<Boolean> timingPoint();
  }

  /** Additional (optional) grouping of lines for particular purposes such as e.g. fare harmonisation or public presentation. */
  public interface TransmodelGraphQLGroupOfLines {
    public DataFetcher<String> description();

    public DataFetcher<String> id();

    public DataFetcher<java.util.List<Route>> lines();

    public DataFetcher<String> name();

    public DataFetcher<String> privateCode();

    public DataFetcher<String> shortName();
  }

  public interface TransmodelGraphQLInterchange {
    public DataFetcher<Route> FromLine();

    public DataFetcher<Trip> FromServiceJourney();

    public DataFetcher<Route> ToLine();

    public DataFetcher<Trip> ToServiceJourney();

    public DataFetcher<Trip> fromServiceJourney();

    public DataFetcher<Boolean> guaranteed();

    public DataFetcher<Integer> maximumWaitTime();

    public DataFetcher<TransferPriority> priority();

    public DataFetcher<Boolean> staySeated();

    public DataFetcher<Trip> toServiceJourney();
  }

  public interface TransmodelGraphQLJourneyPattern {
    public DataFetcher<Direction> directionType();

    public DataFetcher<String> id();

    public DataFetcher<Route> line();

    public DataFetcher<String> name();

    public DataFetcher<java.util.List<Notice>> notices();

    public DataFetcher<EncodedPolyline> pointsOnLink();

    public DataFetcher<java.util.List<StopLocation>> quays();

    public DataFetcher<java.util.List<Trip>> serviceJourneys();

    public DataFetcher<java.util.List<Trip>> serviceJourneysForDate();

    public DataFetcher<java.util.List<TransitAlert>> situations();

    public DataFetcher<java.util.List<EncodedPolylineBeanWithStops>> stopToStopGeometries();
  }

  /** Part of a trip pattern. Either a ride on a public transport vehicle or access or path link to/from/between places */
  public interface TransmodelGraphQLLeg {
    public DataFetcher<Long> aimedEndTime();

    public DataFetcher<Long> aimedStartTime();

    public DataFetcher<Agency> authority();

    public DataFetcher<java.util.List<String>> bikeRentalNetworks();

    public DataFetcher<BookingInfo> bookingArrangements();

    public DataFetcher<TripOnServiceDate> datedServiceJourney();

    public DataFetcher<Long> directDuration();

    public DataFetcher<Double> distance();

    public DataFetcher<Long> duration();

    public DataFetcher<Long> expectedEndTime();

    public DataFetcher<Long> expectedStartTime();

    public DataFetcher<TripTimeOnDate> fromEstimatedCall();

    public DataFetcher<Place> fromPlace();

    public DataFetcher<Integer> generalizedCost();

    public DataFetcher<String> id();

    public DataFetcher<ConstrainedTransfer> interchangeFrom();

    public DataFetcher<ConstrainedTransfer> interchangeTo();

    public DataFetcher<java.util.List<TripTimeOnDate>> intermediateEstimatedCalls();

    public DataFetcher<java.util.List<StopLocation>> intermediateQuays();

    public DataFetcher<Route> line();

    public DataFetcher<Object> mode();

    public DataFetcher<java.util.List<Leg>> nextLegs();

    public DataFetcher<Operator> operator();

    public DataFetcher<EncodedPolyline> pointsOnLink();

    public DataFetcher<java.util.List<Leg>> previousLegs();

    public DataFetcher<Boolean> realtime();

    public DataFetcher<Boolean> rentedBike();

    public DataFetcher<Boolean> ride();

    public DataFetcher<java.time.LocalDate> serviceDate();

    public DataFetcher<Trip> serviceJourney();

    public DataFetcher<java.util.List<TripTimeOnDate>> serviceJourneyEstimatedCalls();

    public DataFetcher<java.util.List<TransitAlert>> situations();

    public DataFetcher<java.util.List<WalkStep>> steps();

    public DataFetcher<TripTimeOnDate> toEstimatedCall();

    public DataFetcher<Place> toPlace();

    public DataFetcher<TransmodelTransportSubmode> transportSubmode();

    public DataFetcher<Boolean> walkingBike();
  }

  /** A group of routes which is generally known to the public by a similar name or number */
  public interface TransmodelGraphQLLine {
    public DataFetcher<Agency> authority();

    public DataFetcher<BikeAccess> bikesAllowed();

    public DataFetcher<BookingInfo> bookingArrangements();

    public DataFetcher<Branding> branding();

    public DataFetcher<String> description();

    public DataFetcher<String> flexibleLineType();

    public DataFetcher<java.util.List<GroupOfRoutes>> groupOfLines();

    public DataFetcher<String> id();

    public DataFetcher<java.util.List<TripPattern>> journeyPatterns();

    public DataFetcher<String> name();

    public DataFetcher<java.util.List<Notice>> notices();

    public DataFetcher<Operator> operator();

    public DataFetcher<Route> presentation();

    public DataFetcher<String> publicCode();

    public DataFetcher<java.util.List<StopLocation>> quays();

    public DataFetcher<java.util.List<Trip>> serviceJourneys();

    public DataFetcher<java.util.List<TransitAlert>> situations();

    public DataFetcher<TransitMode> transportMode();

    public DataFetcher<TransmodelTransportSubmode> transportSubmode();

    public DataFetcher<String> url();
  }

  /** Text with language */
  public interface TransmodelGraphQLMultilingualString {
    public DataFetcher<String> language();

    public DataFetcher<String> value();
  }

  public interface TransmodelGraphQLNotice {
    public DataFetcher<String> id();

    public DataFetcher<String> publicCode();

    public DataFetcher<String> text();
  }

  /** Organisation providing public transport services. */
  public interface TransmodelGraphQLOperator {
    public DataFetcher<String> id();

    public DataFetcher<java.util.List<Route>> lines();

    public DataFetcher<String> name();

    public DataFetcher<String> phone();

    public DataFetcher<java.util.List<Trip>> serviceJourney();

    public DataFetcher<String> url();
  }

  /** Information about pagination in a connection. */
  public interface TransmodelGraphQLPageInfo {
    public DataFetcher<String> endCursor();

    public DataFetcher<Boolean> hasNextPage();

    public DataFetcher<Boolean> hasPreviousPage();

    public DataFetcher<String> startCursor();
  }

  /** A series of turn by turn instructions used for walking, biking and driving. */
  public interface TransmodelGraphQLPathGuidance {
    public DataFetcher<Boolean> area();

    public DataFetcher<Boolean> bogusName();

    public DataFetcher<Double> distance();

    public DataFetcher<String> exit();

    public DataFetcher<AbsoluteDirection> heading();

    public DataFetcher<Double> latitude();

    public DataFetcher<Double> longitude();

    public DataFetcher<RelativeDirection> relativeDirection();

    public DataFetcher<Boolean> stayOn();

    public DataFetcher<String> streetName();
  }

  /** Common super class for all places (stop places, quays, car parks, bike parks and bike rental stations ) */
  public interface TransmodelGraphQLPlace {
    public DataFetcher<VehicleRentalStation> bikeRentalStation();

    public DataFetcher<org.locationtech.jts.geom.Coordinate[]> flexibleArea();

    public DataFetcher<Double> latitude();

    public DataFetcher<Double> longitude();

    public DataFetcher<String> name();

    public DataFetcher<StopLocation> quay();

    public DataFetcher<VehicleRentalVehicle> rentalVehicle();

    public DataFetcher<VertexType> vertexType();
  }

  public interface TransmodelGraphQLPlaceAtDistance {
    public DataFetcher<Double> distance();

    public DataFetcher<String> id();

    public DataFetcher<Object> place();
  }

  /** Interface for places, i.e. quays, stop places, parks */
  public interface TransmodelGraphQLPlaceInterface extends TypeResolver {
    public default DataFetcher<String> id() {
      return null;
    }

    public default DataFetcher<Double> latitude() {
      return null;
    }

    public default DataFetcher<Double> longitude() {
      return null;
    }
  }

  /** A list of coordinates encoded as a polyline string (see http://code.google.com/apis/maps/documentation/polylinealgorithm.html) */
  public interface TransmodelGraphQLPointsOnLink {
    public DataFetcher<Integer> length();

    public DataFetcher<String> points();
  }

  /** Types describing common presentation properties */
  public interface TransmodelGraphQLPresentation {
    public DataFetcher<String> colour();

    public DataFetcher<String> textColour();
  }

  /** Simple public transport situation element */
  public interface TransmodelGraphQLPtSituationElement {
    public DataFetcher<java.util.List<Map.Entry<String, String>>> advice();

    public DataFetcher<Agency> authority();

    public DataFetcher<java.util.List<Map.Entry<String, String>>> description();

    public DataFetcher<String> id();

    public DataFetcher<java.util.List<AlertUrl>> infoLinks();

    public DataFetcher<java.util.List<Route>> lines();

    public DataFetcher<Integer> priority();

    public DataFetcher<java.util.List<StopLocation>> quays();

    public DataFetcher<Agency> reportAuthority();

    public DataFetcher<String> reportType();

    public DataFetcher<java.util.List<Trip>> serviceJourneys();

    public DataFetcher<String> severity();

    public DataFetcher<String> situationNumber();

    public DataFetcher<java.util.List<MonoOrMultiModalStation>> stopPlaces();

    public DataFetcher<java.util.List<Map.Entry<String, String>>> summary();

    public DataFetcher<Pair<Long, Long>> validityPeriod();
  }

  /** A place such as platform, stance, or quayside where passengers have access to PT vehicles. */
  public interface TransmodelGraphQLQuay {
    public DataFetcher<String> description();

    public DataFetcher<java.util.List<TripTimeOnDate>> estimatedCalls();

    public DataFetcher<org.locationtech.jts.geom.Coordinate[]> flexibleArea();

    public DataFetcher<java.util.List<StopLocation>> flexibleGroup();

    public DataFetcher<String> id();

    public DataFetcher<java.util.List<TripPattern>> journeyPatterns();

    public DataFetcher<Double> latitude();

    public DataFetcher<java.util.List<Route>> lines();

    public DataFetcher<Double> longitude();

    public DataFetcher<String> name();

    public DataFetcher<String> publicCode();

    public DataFetcher<java.util.List<TransitAlert>> situations();

    public DataFetcher<MonoOrMultiModalStation> stopPlace();

    public DataFetcher<String> stopType();

    public DataFetcher<java.util.List<FareZone>> tariffZones();

    public DataFetcher<String> timeZone();

    public DataFetcher<Accessibility> wheelchairAccessible();
  }

  public interface TransmodelGraphQLQuayAtDistance {
    public DataFetcher<Double> distance();

    public DataFetcher<String> id();

    public DataFetcher<StopLocation> quay();
  }

  public interface TransmodelGraphQLQueryType {
    public DataFetcher<java.util.List<Agency>> authorities();

    public DataFetcher<Agency> authority();

    public DataFetcher<VehicleParking> bikePark();

    public DataFetcher<java.util.List<VehicleParking>> bikeParks();

    public DataFetcher<VehicleRentalStation> bikeRentalStation();

    public DataFetcher<java.util.List<VehicleRentalStation>> bikeRentalStations();

    public DataFetcher<java.util.List<VehicleRentalStation>> bikeRentalStationsByBbox();

    public DataFetcher<TripOnServiceDate> datedServiceJourney();

    public DataFetcher<java.util.List<TripOnServiceDate>> datedServiceJourneys();

    public DataFetcher<GroupOfRoutes> groupOfLines();

    public DataFetcher<java.util.List<GroupOfRoutes>> groupsOfLines();

    public DataFetcher<Leg> leg();

    public DataFetcher<Route> line();

    public DataFetcher<java.util.List<Route>> lines();

    public DataFetcher<Connection<PlaceAtDistance>> nearest();

    public DataFetcher<Operator> operator();

    public DataFetcher<java.util.List<Operator>> operators();

    public DataFetcher<StopLocation> quay();

    public DataFetcher<java.util.List<StopLocation>> quays();

    public DataFetcher<java.util.List<StopLocation>> quaysByBbox();

    public DataFetcher<Connection<NearbyStop>> quaysByRadius();

    public DataFetcher<RoutingPreferences> routingParameters();

    public DataFetcher<OtpProjectInfo> serverInfo();

    public DataFetcher<Trip> serviceJourney();

    public DataFetcher<java.util.List<Trip>> serviceJourneys();

    public DataFetcher<TransitAlert> situation();

    public DataFetcher<java.util.List<TransitAlert>> situations();

    public DataFetcher<MonoOrMultiModalStation> stopPlace();

    public DataFetcher<java.util.List<MonoOrMultiModalStation>> stopPlaces();

    public DataFetcher<java.util.List<MonoOrMultiModalStation>> stopPlacesByBbox();

    public DataFetcher<PlanResponse> trip();
  }

  public interface TransmodelGraphQLRentalVehicle {
    public DataFetcher<Double> currentRangeMeters();

    public DataFetcher<String> id();

    public DataFetcher<Double> latitude();

    public DataFetcher<Double> longitude();

    public DataFetcher<String> network();

    public DataFetcher<RentalVehicleType> vehicleType();
  }

  public interface TransmodelGraphQLRentalVehicleType {
    public DataFetcher<String> formFactor();

    public DataFetcher<Double> maxRangeMeters();

    public DataFetcher<String> name();

    public DataFetcher<String> propulsionType();

    public DataFetcher<String> vehicleTypeId();
  }

  /** Description of the reason, why the planner did not return any results */
  public interface TransmodelGraphQLRoutingError {
    public DataFetcher<RoutingErrorCode> code();

    public DataFetcher<String> description();

    public DataFetcher<InputField> inputField();
  }

  /** The default parameters used in travel searches. */
  public interface TransmodelGraphQLRoutingParameters {
    public DataFetcher<Integer> alightSlackDefault();

    public DataFetcher<java.util.List<TransportModeSlack>> alightSlackList();

    public DataFetcher<Boolean> allowBikeRental();

    public DataFetcher<Integer> bikeBoardCost();

    public DataFetcher<Integer> bikeParkCost();

    public DataFetcher<Integer> bikeParkTime();

    public DataFetcher<Integer> bikeRentalDropOffCost();

    public DataFetcher<Integer> bikeRentalDropOffTime();

    public DataFetcher<Integer> bikeRentalPickupCost();

    public DataFetcher<Integer> bikeRentalPickupTime();

    public DataFetcher<Double> bikeSpeed();

    public DataFetcher<Integer> boardSlackDefault();

    public DataFetcher<java.util.List<TransportModeSlack>> boardSlackList();

    public DataFetcher<Double> carAccelerationSpeed();

    public DataFetcher<Double> carDecelerationSpeed();

    public DataFetcher<Integer> carDropOffTime();

    public DataFetcher<Double> carSpeed();

    public DataFetcher<Boolean> compactLegsByReversedSearch();

    public DataFetcher<Boolean> debugItineraryFilter();

    public DataFetcher<Boolean> disableAlertFiltering();

    public DataFetcher<Boolean> disableRemainingWeightHeuristic();

    public DataFetcher<Integer> elevatorBoardCost();

    public DataFetcher<Integer> elevatorBoardTime();

    public DataFetcher<Integer> elevatorHopCost();

    public DataFetcher<Integer> elevatorHopTime();

    public DataFetcher<Boolean> geoIdElevation();

    public DataFetcher<Boolean> ignoreRealTimeUpdates();

    public DataFetcher<Boolean> includedPlannedCancellations();

    public DataFetcher<Boolean> kissAndRide();

    public DataFetcher<Integer> maxAdditionalTransfers();

    public DataFetcher<Integer> maxDirectStreetDuration();

    public DataFetcher<Double> maxSlope();

    public DataFetcher<Integer> maxTransfers();

    public DataFetcher<Integer> numItineraries();

    public DataFetcher<Boolean> onlyTransitTrips();

    public DataFetcher<Integer> otherThanPreferredRoutesPenalty();

    public DataFetcher<Boolean> parkAndRide();

    public DataFetcher<Boolean> reverseOptimizeOnTheFly();

    public DataFetcher<Boolean> showIntermediateStops();

    public DataFetcher<Double> stairsReluctance();

    public DataFetcher<Integer> transferPenalty();

    public DataFetcher<Integer> transferSlack();

    public DataFetcher<Double> turnReluctance();

    public DataFetcher<Double> waitReluctance();

    public DataFetcher<Integer> walkBoardCost();

    public DataFetcher<Double> walkReluctance();

    public DataFetcher<Double> walkSpeed();

    public DataFetcher<Boolean> wheelChairAccessible();
  }

  public interface TransmodelGraphQLServerInfo {
    public DataFetcher<String> buildConfigVersion();

    public DataFetcher<String> buildTime();

    public DataFetcher<String> gitBranch();

    public DataFetcher<String> gitCommit();

    public DataFetcher<String> gitCommitTime();

    public DataFetcher<String> otpConfigVersion();

    public DataFetcher<String> otpSerializationVersionId();

    public DataFetcher<String> routerConfigVersion();

    public DataFetcher<String> version();
  }

  /** A planned vehicle journey with passengers. */
  public interface TransmodelGraphQLServiceJourney {
    public DataFetcher<java.util.List<java.time.LocalDate>> activeDates();

    public DataFetcher<BikeAccess> bikesAllowed();

    public DataFetcher<BookingInfo> bookingArrangements();

    public DataFetcher<Direction> directionType();

    public DataFetcher<java.util.List<TripTimeOnDate>> estimatedCalls();

    public DataFetcher<String> id();

    public DataFetcher<TripPattern> journeyPattern();

    public DataFetcher<Route> line();

    public DataFetcher<java.util.List<Notice>> notices();

    public DataFetcher<Operator> operator();

    public DataFetcher<java.util.List<TripTimeOnDate>> passingTimes();

    public DataFetcher<EncodedPolyline> pointsOnLink();

    public DataFetcher<String> privateCode();

    public DataFetcher<String> publicCode();

    public DataFetcher<java.util.List<StopLocation>> quays();

    public DataFetcher<TripAlteration> serviceAlteration();

    public DataFetcher<java.util.List<TransitAlert>> situations();

    public DataFetcher<TransitMode> transportMode();

    public DataFetcher<TransmodelTransportSubmode> transportSubmode();

    public DataFetcher<Accessibility> wheelchairAccessible();
  }

  /** Named place where public transport may be accessed. May be a building complex (e.g. a station) or an on-street location. */
  public interface TransmodelGraphQLStopPlace {
    public DataFetcher<String> description();

    public DataFetcher<java.util.List<TripTimeOnDate>> estimatedCalls();

    public DataFetcher<String> id();

    public DataFetcher<Double> latitude();

    public DataFetcher<Double> longitude();

    public DataFetcher<String> name();

    public DataFetcher<MonoOrMultiModalStation> parent();

    public DataFetcher<java.util.List<StopLocation>> quays();

    public DataFetcher<java.util.List<TransitAlert>> situations();

    public DataFetcher<java.util.List<FareZone>> tariffZones();

    public DataFetcher<String> timeZone();

    public DataFetcher<java.util.List<TransitMode>> transportMode();

    public DataFetcher<java.util.List<TransmodelTransportSubmode>> transportSubmode();

    public DataFetcher<Integer> weighting();
  }

  /** List of coordinates between two stops as a polyline */
  public interface TransmodelGraphQLStopToStopGeometry {
    public DataFetcher<StopLocation> fromQuay();

    public DataFetcher<EncodedPolyline> pointsOnLink();

    public DataFetcher<StopLocation> toQuay();
  }

  /** A system notice is used to tag elements with system information for debugging or other system related purpose. One use-case is to run a routing search with 'itineraryFilters.debug: true'. This will then tag itineraries instead of removing them from the result. This make it possible to inspect the itinerary-filter-chain. A SystemNotice only have english text, because the primary user are technical staff, like testers and developers. */
  public interface TransmodelGraphQLSystemNotice {
    public DataFetcher<String> tag();

    public DataFetcher<String> text();
  }

  public interface TransmodelGraphQLTariffZone {
    public DataFetcher<String> id();

    public DataFetcher<String> name();
  }

  public interface TransmodelGraphQLTimeAndDayOffset {
    public DataFetcher<Integer> dayOffset();

    public DataFetcher<Integer> time();
  }

  /** Scheduled passing times. These are not affected by real time updates. */
  public interface TransmodelGraphQLTimetabledPassingTime {
    public DataFetcher<Integer> arrival();

    public DataFetcher<BookingInfo> bookingArrangements();

    public DataFetcher<Integer> departure();

    public DataFetcher<TripTimeOnDate> destinationDisplay();

    public DataFetcher<Integer> earliestDepartureTime();

    public DataFetcher<Boolean> forAlighting();

    public DataFetcher<Boolean> forBoarding();

    public DataFetcher<Integer> latestArrivalTime();

    public DataFetcher<java.util.List<Notice>> notices();

    public DataFetcher<StopLocation> quay();

    public DataFetcher<Boolean> requestStop();

    public DataFetcher<Trip> serviceJourney();

    public DataFetcher<Boolean> timingPoint();
  }

  /** Used to specify board and alight slack for a given modes. */
  public interface TransmodelGraphQLTransportModeSlackType {
    public DataFetcher<java.util.List<TransitMode>> modes();

    public DataFetcher<Integer> slack();
  }

  /** Description of a travel between two places. */
  public interface TransmodelGraphQLTrip {
    public DataFetcher<Long> dateTime();

    public DataFetcher<DebugOutput> debugOutput();

    public DataFetcher<Place> fromPlace();

    public DataFetcher<java.util.List<String>> messageEnums();

    public DataFetcher<java.util.List<String>> messageStrings();

    public DataFetcher<TripSearchMetadata> metadata();

    public DataFetcher<String> nextPageCursor();

    public DataFetcher<String> previousPageCursor();

    public DataFetcher<java.util.List<RoutingError>> routingErrors();

    public DataFetcher<Place> toPlace();

    public DataFetcher<java.util.List<Itinerary>> tripPatterns();
  }

  /** List of legs constituting a suggested sequence of rides and links for a specific trip. */
  public interface TransmodelGraphQLTripPattern {
    public DataFetcher<Long> aimedEndTime();

    public DataFetcher<Long> aimedStartTime();

    public DataFetcher<Long> directDuration();

    public DataFetcher<Double> distance();

    public DataFetcher<Long> duration();

    public DataFetcher<Long> endTime();

    public DataFetcher<Long> expectedEndTime();

    public DataFetcher<Long> expectedStartTime();

    public DataFetcher<Integer> generalizedCost();

    public DataFetcher<java.util.List<Leg>> legs();

    public DataFetcher<Long> startTime();

    public DataFetcher<java.util.List<SystemNotice>> systemNotices();

    public DataFetcher<Integer> transferPriorityCost();

    public DataFetcher<Integer> waitTimeOptimizedCost();

    public DataFetcher<Long> waitingTime();

    public DataFetcher<Double> walkDistance();

    public DataFetcher<Long> walkTime();
  }

  /** Trips search metadata. */
  public interface TransmodelGraphQLTripSearchData {
    public DataFetcher<Long> nextDateTime();

    public DataFetcher<Long> prevDateTime();

    public DataFetcher<Integer> searchWindowUsed();
  }

  public interface TransmodelGraphQLValidityPeriod {
    public DataFetcher<Long> endTime();

    public DataFetcher<Long> startTime();
  }

  public interface TransmodelGraphQLDebugOutput {
    public DataFetcher<Long> totalTime();
  }

  public interface TransmodelGraphQLInfoLink {
    public DataFetcher<String> label();

    public DataFetcher<String> uri();
  }

  /** A connection to a list of items. */
  public interface TransmodelGraphQLPlaceAtDistanceConnection {
    public DataFetcher<java.util.List<Edge<PlaceAtDistance>>> edges();

    public DataFetcher<PageInfo> pageInfo();
  }

  /** An edge in a connection */
  public interface TransmodelGraphQLPlaceAtDistanceEdge {
    public DataFetcher<String> cursor();

    public DataFetcher<PlaceAtDistance> node();
  }

  /** A connection to a list of items. */
  public interface TransmodelGraphQLQuayAtDistanceConnection {
    public DataFetcher<java.util.List<Edge<NearbyStop>>> edges();

    public DataFetcher<PageInfo> pageInfo();
  }

  /** An edge in a connection */
  public interface TransmodelGraphQLQuayAtDistanceEdge {
    public DataFetcher<String> cursor();

    public DataFetcher<NearbyStop> node();
  }
}
